
# This file was *autogenerated* from the file generate_KAT_poly_blzzd.sage
from sage.all_cmdline import *   # import sage library

_sage_const_100 = Integer(100); _sage_const_1 = Integer(1); _sage_const_512 = Integer(512); _sage_const_12289 = Integer(12289)#
# Script to generate KAT values for poly
#

REPETITIONS = _sage_const_100 

n = _sage_const_512 
q = _sage_const_12289 
Zq = Integers(q)['X']; (X,) = Zq._first_ngens(1)
Rq = PolynomialQuotientRing(Zq, X ** n+_sage_const_1 , names=('x',)); (x,) = Rq._first_ngens(1)

f = open('../tests/static/data_poly_blzzd.c', 'w')

f.write('#define REPETITIONS %d\n\n'%REPETITIONS)

f.write('#define N %d\n\n'%n)

f.write('int32_t a[REPETITIONS][N], b[REPETITIONS][N], c[REPETITIONS][N];\n')

f.write('\n')

for i in range(REPETITIONS):
    a = Rq.random_element()
    f.write('int32_t a%d[%d]={'%(i,n))
    for j in range(n-_sage_const_1 ):
        f.write('%d, '%a[j].lift())
    f.write('%d};\n'%a[n-_sage_const_1 ].lift())
    f.write('for (size_t i=0; i<%d; i++) a[%d][i] = a%d[i];\n'%(n,i,i))
    b = Rq.random_element()
    f.write('int32_t b%d[%d]={'%(i,n))
    for j in range(n-_sage_const_1 ):
        f.write('%d, '%b[j].lift())
    f.write('%d};\n'%b[n-_sage_const_1 ].lift())
    f.write('for (size_t i=0; i<%d; i++) b[%d][i] = b%d[i];\n'%(n,i,i))
    c = a*b
    f.write('int32_t c%d[%d]={'%(i,n))
    for j in range(n-_sage_const_1 ):
        f.write('%d, '%c[j].lift())
    f.write('%d};\n'%c[n-_sage_const_1 ].lift())
    f.write('for (size_t i=0; i<%d; i++) c[%d][i] = c%d[i];\n'%(n,i,i))
    f.write('\n')

f.close()

